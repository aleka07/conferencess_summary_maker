import os
import shutil
from google import genai
from google.genai import types
import os
from dotenv import load_dotenv
load_dotenv()   

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
API_KEY = os.environ.get("GEMINI_API_KEY")  # <-- –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–ò–ú –ö–õ–Æ–ß–û–ú

RAW_TEXT_BASE_DIR = "raw_text"
FULL_TRANSCRIPT_FILENAME = "_full_transcript.txt"
SUMMARIES_BASE_DIR = "summaries"
SUMMARY_FILENAME = "_summary.txt"
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


# --- –ö–õ–ò–ï–ù–¢ –ò –ü–†–û–ú–ü–¢ ---
try:
    CLIENT = genai.Client(api_key=API_KEY)
    print("–ö–ª–∏–µ–Ω—Ç Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ Gemini: {e}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à API_KEY.")
    CLIENT = None

# –ù–æ–≤—ã–π –≥–∏–±–∫–∏–π –ø—Ä–æ–º–ø—Ç
SUMMARIZE_PROMPT = """
**–°–∏—Å—Ç–µ–º–Ω–∞—è —Ä–æ–ª—å (System/Role Instruction)**

–¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–≤–æ—è —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ‚Äî –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å —Ö–∞–æ—Ç–∏—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á –≤ –∫—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —á–∏—Å—Ç—ã–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Ç—á–µ—Ç—ã. –¢—ã —É–º–µ–µ—à—å —É–ª–∞–≤–ª–∏–≤–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –∏ –æ—Ç—Å–µ–∏–≤–∞—Ç—å –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ.

**–ó–∞–¥–∞—á–∞ (Task)**

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–æ–≤–µ—â–∞–Ω–∏—è. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown. **–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ—à–∏, –∫–∞–∫–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∏–∂–µ —Ä–∞–∑–¥–µ–ª–æ–≤ –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –æ—Ç—Ä–∞–∂–∞—é—Ç –µ–≥–æ —Å—É—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã.**

**–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:**

–¢–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π —Å–æ–≤–µ—â–∞–Ω–∏—è. –û–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ —Ñ—Ä–∞–∑—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö.

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –∏ —Ñ–æ—Ä–º–∞—Ç—É:**

1.  **–ì–∏–±–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:** –í—ã–±–µ—Ä–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ —Ä–∞–∑–¥–µ–ª—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –∑–Ω–∞—á–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ï—Å–ª–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –≤—Å—Ç—Ä–µ—á–µ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π, –Ω–µ –≤–∫–ª—é—á–∞–π —Ä–∞–∑–¥–µ–ª "‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è".
2.  **–§–æ—Ä–º–∞—Ç Markdown:** –ò—Å–ø–æ–ª—å–∑—É–π Markdown –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ —Å–ø–∏—Å–∫–æ–≤.
3.  **–°—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–∫—Å—Ç—É:** –ù–µ –¥–æ–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í—Å–µ –≤—ã–≤–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–Ω–æ–≤–∞–Ω—ã –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
4.  **–õ–∞–∫–æ–Ω–∏—á–Ω—ã–π —è–∑—ã–∫:** –ü–∏—à–∏ —è—Å–Ω–æ, –ø–æ –¥–µ–ª—É, –±–µ–∑ –≤–æ–¥—ã.

**--- –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ (–≤—ã–±–µ—Ä–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ) ---**

### –ò—Ç–æ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏: [–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏, –≤–∑—è—Ç–æ–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞]

#### üîπ –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:
- (–°–ø–∏—Å–æ–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–Ω–∏–º–∞–ª–∏—Å—å)

#### üéØ –ì–ª–∞–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- (–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–∫–ª—é—á–µ–Ω–∏—è, –∏—Ç–æ–≥–∏ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞)

#### ‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è:
- (–°–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π)

####  actionable –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (Action Items):
- **[–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, –µ—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è]**: (–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏, –µ—Å–ª–∏ –µ—Å—Ç—å, –∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫)

#### ‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã:
- (–°–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º, —Ä–∏—Å–∫–æ–≤ –∏–ª–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –æ–∑–≤—É—á–µ–Ω—ã)

#### ‚ùì –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ç–µ–º—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π:
- (–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –∏–ª–∏ –±—ã–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω—ã)

"""
# --- –ö–û–ù–ï–¶ –ü–†–û–ú–ü–¢–ê ---


def get_meetings_for_summarization():
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–∞–ø–∫–∏ —Å–æ–≤–µ—â–∞–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è."""
    folders = []
    if not os.path.exists(RAW_TEXT_BASE_DIR):
        print(f"–û—à–∏–±–∫–∞: –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ '{RAW_TEXT_BASE_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return folders
    for item in os.listdir(RAW_TEXT_BASE_DIR):
        full_transcript_path = os.path.join(RAW_TEXT_BASE_DIR, item, FULL_TRANSCRIPT_FILENAME)
        if os.path.isfile(full_transcript_path):
            folders.append(item)
    return sorted(folders)

def get_summary_status(meeting_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ —Ä–µ–∑—é–º–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—â–∞–Ω–∏—è."""
    summary_path = os.path.join(SUMMARIES_BASE_DIR, meeting_name, SUMMARY_FILENAME)
    return os.path.exists(summary_path)

def create_summary_for_meeting(meeting_name):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—é–º–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—â–∞–Ω–∏—è."""
    print(f"\n--- –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ –¥–ª—è: {meeting_name} ---")
    
    full_transcript_path = os.path.join(RAW_TEXT_BASE_DIR, meeting_name, FULL_TRANSCRIPT_FILENAME)
    output_dir = os.path.join(SUMMARIES_BASE_DIR, meeting_name)
    output_filepath = os.path.join(output_dir, SUMMARY_FILENAME)
    os.makedirs(output_dir, exist_ok=True)
    
    try:
        print(f"–ß–∏—Ç–∞—é —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {full_transcript_path}")
        with open(full_transcript_path, 'r', encoding='utf-8') as f:
            full_text = f.read()
        if not full_text.strip():
            print("–û—à–∏–±–∫–∞: –§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            return
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{full_transcript_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
        return
        
    try:
        print("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç –≤ Gemini –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (—Ä–µ–∂–∏–º '–≥–ª—É–±–æ–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è' –≤–∫–ª—é—á–µ–Ω).")
        prompt_with_context = SUMMARIZE_PROMPT.replace("[–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏, –≤–∑—è—Ç–æ–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞]", meeting_name)
        
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –¥–æ–±–∞–≤–ª–µ–Ω config —Å thinking_budget ---
        response = CLIENT.models.generate_content(
            model='gemini-2.5-flash',
            contents=[prompt_with_context, full_text],
            config=types.GenerateContentConfig(
                thinking_config=types.ThinkingConfig(thinking_budget=-1)
            )
        )
        summary_text = response.text
        
        with open(output_filepath, 'w', encoding='utf-8') as f:
            f.write(summary_text)
        print(f"–£—Å–ø–µ—à–Ω–æ! –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {output_filepath}")

    except Exception as e:
        print(f"!!! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}")

def main():
    if not CLIENT:
        return
        
    os.makedirs(SUMMARIES_BASE_DIR, exist_ok=True)
    
    while True:
        meetings = get_meetings_for_summarization()
        if not meetings:
            print(f"–í –ø–∞–ø–∫–µ '{RAW_TEXT_BASE_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π ('{FULL_TRANSCRIPT_FILENAME}').")
            break

        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–≤–µ—â–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ:")
        meetings_to_process = []
        for i, meeting_name in enumerate(meetings):
            status = "(—Ä–µ–∑—é–º–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ)" if get_summary_status(meeting_name) else ""
            print(f"{i + 1}. {meeting_name} {status}")
            meetings_to_process.append((meeting_name, get_summary_status(meeting_name)))
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–≤–µ—â–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
            if choice.lower() == 'q':
                break
            
            choice_index = int(choice) - 1
            if 0 <= choice_index < len(meetings_to_process):
                selected_meeting, already_summarized = meetings_to_process[choice_index]
                
                if already_summarized:
                    confirm = input(f"–†–µ–∑—é–º–µ –¥–ª—è '{selected_meeting}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ? (y/n): ")
                    if confirm.lower() != 'y':
                        continue
                
                create_summary_for_meeting(selected_meeting)
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
        except ValueError:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ 'q'.")

if __name__ == "__main__":
    main()