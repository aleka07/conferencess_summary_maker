import os
from dotenv import load_dotenv
from openai import OpenAI

# ---------------------------------------------------------------------------
# üì¶ 1.  ENV & CLIENT INITIALISATION
# ---------------------------------------------------------------------------
load_dotenv()

API_KEY = os.environ.get("OPENROUTER_API_KEY")  # <-- put your key in .env
if not API_KEY:
    raise EnvironmentError("Environment variable OPENROUTER_API_KEY not found.")

# Endpoint and model
OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1"
MODEL_ID = "deepseek/deepseek-r1:free"  # free tier model slug

client = OpenAI(base_url=OPENROUTER_BASE_URL, api_key=API_KEY)
print("OpenRouter client initialised (DeepSeek‚ÄëR1).")

# ---------------------------------------------------------------------------
# üóÇÔ∏è 2.  PATHS & CONSTANTS (retain original directory logic)
# ---------------------------------------------------------------------------
RAW_TEXT_BASE_DIR = "raw_text"
FULL_TRANSCRIPT_FILENAME = "_full_transcript.txt"
SUMMARIES_BASE_DIR = "summaries"
SUMMARY_FILENAME = "_summary.txt"

# ---------------------------------------------------------------------------
# üìù 3.  FLEXIBLE MARKDOWN PROMPT (no system role)
# ---------------------------------------------------------------------------
SUMMARIZE_PROMPT = """
–¢—ã¬†‚Äî —ç–ª–∏—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å‚Äë–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞¬†‚Äì –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
—Å–æ–≤–µ—â–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ (Markdown).

**–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –∏ —Ñ–æ—Ä–º–∞—Ç—É**
1. –í—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.
2. –ò—Å–ø–æ–ª—å–∑—É–π Markdown‚Äë–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å–ø–∏—Å–∫–∏.
3. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤, –æ–ø–∏—Ä–∞–π—Å—è —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ç–µ–∫—Å—Ç.
4. –ü–∏—à–∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ.

--- –ú–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤ ---
### –ò—Ç–æ–≥–∏ –≤—Å—Ç—Ä–µ—á–∏: [–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏]
#### üîπ –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è:
- ‚Ä¶
#### üéØ –ì–ª–∞–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- ‚Ä¶
#### ‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ —Ä–µ—à–µ–Ω–∏—è:
- ‚Ä¶
####  actionable –ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (Action Items):
- **[–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π]**: ‚Ä¶
#### ‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ —Ä–∏—Å–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã:
- ‚Ä¶
#### ‚ùì –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ç–µ–º—ã –¥–ª—è –±—É–¥—É—â–∏—Ö –æ–±—Å—É–∂–¥–µ–Ω–∏–π:
- ‚Ä¶
"""
# SUMMARIZE_PROMPT = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å–æ–≤–µ—â–∞–Ω–∏—è –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ."

# ---------------------------------------------------------------------------
# üîç 4.  UTILS (unchanged)
# ---------------------------------------------------------------------------

def get_meetings_for_summarization():
    folders = []
    if not os.path.exists(RAW_TEXT_BASE_DIR):
        print(f"–û—à–∏–±–∫–∞: –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ '{RAW_TEXT_BASE_DIR}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return folders
    for item in os.listdir(RAW_TEXT_BASE_DIR):
        full_transcript_path = os.path.join(RAW_TEXT_BASE_DIR, item, FULL_TRANSCRIPT_FILENAME)
        if os.path.isfile(full_transcript_path):
            folders.append(item)
    return sorted(folders)

def get_summary_status(meeting_name):
    summary_path = os.path.join(SUMMARIES_BASE_DIR, meeting_name, SUMMARY_FILENAME)
    return os.path.exists(summary_path)

# ---------------------------------------------------------------------------
# ‚ú® 5.  CORE SUMMARISATION FUNCTION (OpenRouter replacement)
# ---------------------------------------------------------------------------

def create_summary_for_meeting(meeting_name):
    print(f"\n--- –°–æ–∑–¥–∞—é —Ä–µ–∑—é–º–µ –¥–ª—è: {meeting_name} ---")

    full_transcript_path = os.path.join(RAW_TEXT_BASE_DIR, meeting_name, FULL_TRANSCRIPT_FILENAME)
    output_dir = os.path.join(SUMMARIES_BASE_DIR, meeting_name)
    output_filepath = os.path.join(output_dir, SUMMARY_FILENAME)
    os.makedirs(output_dir, exist_ok=True)

    try:
        with open(full_transcript_path, "r", encoding="utf-8") as f:
            full_text = f.read()
        if not full_text.strip():
            print("–û—à–∏–±–∫–∞: –§–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø—É—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞—é.")
            return
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{full_transcript_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # Compose single‚Äëmessage prompt as recommended for DeepSeek‚ÄëR1
    user_message = (
        SUMMARIZE_PROMPT.replace("[–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏]", meeting_name)
        + "\n\n```TRANSCRIPT\n" + full_text + "\n```"
    )

    try:
        print("–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –º–æ–¥–µ–ª–∏ DeepSeek‚ÄëR1 (free)‚Ä¶")
        response = client.chat.completions.create(
            model=MODEL_ID,
            messages=[{"role": "user", "content": user_message}],
            temperature=0.6,
            top_p=0.95,
        )
        summary_text = response.choices[0].message.content

        with open(output_filepath, "w", encoding="utf-8") as f:
            f.write(summary_text)
        print(f"‚úÖ –†–µ–∑—é–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_filepath}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter / DeepSeek‚ÄëR1: {e}")

# ---------------------------------------------------------------------------
# üèÉ‚Äç‚ôÇÔ∏è 6.  MAIN LOOP (identical to original)
# ---------------------------------------------------------------------------

def main():
    os.makedirs(SUMMARIES_BASE_DIR, exist_ok=True)

    while True:
        meetings = get_meetings_for_summarization()
        if not meetings:
            print(f"–í '{RAW_TEXT_BASE_DIR}' –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π ('{FULL_TRANSCRIPT_FILENAME}').")
            break

        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–≤–µ—â–∞–Ω–∏—è:")
        meetings_to_process = []
        for i, meeting_name in enumerate(meetings):
            status = "(—Ä–µ–∑—é–º–µ —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ)" if get_summary_status(meeting_name) else ""
            print(f"{i + 1}. {meeting_name} {status}")
            meetings_to_process.append((meeting_name, get_summary_status(meeting_name)))

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–æ–≤–µ—â–∞–Ω–∏—è (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if choice.lower() == 'q':
            break
        if not choice.isdigit():
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
            continue

        idx = int(choice) - 1
        if idx < 0 or idx >= len(meetings_to_process):
            print("–ù–æ–º–µ—Ä –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
            continue

        selected_meeting, already = meetings_to_process[idx]
        if already:
            if input(f"–†–µ–∑—é–º–µ –¥–ª—è '{selected_meeting}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å? (y/n): ").lower() != 'y':
                continue
        create_summary_for_meeting(selected_meeting)


if __name__ == "__main__":
    main()